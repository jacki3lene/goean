package main

import (
  "fmt"
  "sync"
  "time"
  "github.com/jacki3lene/goean/api"
)

func main() {
  defer timeTrack(time.Now(), "main")

  hotelIds := []int{}
  response := make(chan string)

  var wg sync.WaitGroup
  var batchNum = 20

  wg.Add(len(hotelIds)/batchNum)

  for i := 0; i < len(hotelIds); i += batchNum {
    batch := hotelIds[i:min(i+batchNum, len(hotelIds))]
    go getAvailability(batch, "12/23/2015", "12/25/2015", response, &wg)
  }

  items := make([]string, 0)

  go func() {
    for {
      item, ok := <- response
      if !ok {
        break
      }
      //fmt.Println(item)
      items = append(items, item)
    }
  }()

  wg.Wait()

  fmt.Println(len(items))
}

func getAvailability(hotelIds []int, checkIn string, checkOut string, response chan string, wg *sync.WaitGroup){
  api.List(hotelIds, checkIn, checkOut, response, wg)
}

func min(a, b int) int {
  if a <= b {
    return a
  }
  return b
}

func timeTrack(start time.Time, name string) {
  elapsed := time.Since(start)
  fmt.Printf("%s took %s", name, elapsed)
}